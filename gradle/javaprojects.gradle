apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

springVersion = '3.1.0.M2'
slf4jVersion = '1.6.1'
log4jVersion = '1.2.16'
validationVersion = '1.0.0.GA'
hibernateVersion = '4.0.2.GA'
jacksonVersion = '1.6.4'

configurations {
    
	// configuration which is ONLY used for compileJava and will not be inherited by any others
    compileOnly
    
    // used to identify deps which should be marked as "provided" in maven poms
    provided
    
    testCompile.extendsFrom provided
    compile.transitive = false
    testCompile.transitive = false
    
}

dependencies {

    	// Servlet API will be provided by the servlet container
		provided "javax.servlet:servlet-api:2.5"

		// Spring Framework
		compile ("org.springframework:spring-core:$springVersion") {
        	exclude group: "commons-logging", module: "commons-logging"
		}
		compile "org.springframework:spring-beans:$springVersion"
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework:spring-web:$springVersion"
		compile "org.springframework:spring-orm:$springVersion"
		runtime "org.springframework:spring-webmvc:$springVersion"
		
		// Spring Security
		compile "org.springframework.security:spring-security-core:$springVersion"
		runtime "org.springframework.security:spring-security-web:$springVersion"
		runtime ("org.springframework.security:spring-security-config:$springVersion") {
			exclude group: "com.google.code.guice", module: "guice"
		}

		// JSR 303 annotations (Validation) and implementation
		compile "javax.validation:validation-api:$validationVersion"
		runtime "org.hibernate:hibernate-validator:$hibernateVersion"
		
		// JSR 330 (DI) annotations
		compile "javax.inject:javax.inject:1"
		
		// JSON support
		compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"
		
		// Persistence Layer
		compile "javax.persistence:persistence-api:1.0"
		compile "org.scale7:scale7-pelops:1.1-0.7.x"
		compile "org.apache.cassandra:cassandra-all:0.7.+"

		// Logging via SLF4J -> LOG4J
		compile "org.slf4j:slf4j-api:$slf4jVersion"
		runtime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
		runtime "org.slf4j:slf4j-log4j12:$slf4jVersion"
		runtime "log4j:log4j:$log4jVersion"
    	
		// Testing and Mocking
		testCompile "junit:junit:4.8.+"
		testCompile "org.mockito:mockito-core:1.8.+"
		testCompile "org.hamcrest:hamcrest-library:1.3.+"

}

[configurations.runtime, configurations.default]*.exclude(module: "commons-logging")

sourceSets.main.compileClasspath += configurations.compileOnly
sourceSets.main.compileClasspath += configurations.provided

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceCompatibility = 1.6
targetCompatibility = 1.6

test {
    jvmArgs = ['-ea', '-Xmx500m']
    maxParallelForks = guessMaxForks()
    logging.captureStandardOutput(LogLevel.INFO)
    testReport = true
}

def guessMaxForks() {
    int processors = Runtime.runtime.availableProcessors()
    return Math.max(2, (int) (processors / 2))
}

